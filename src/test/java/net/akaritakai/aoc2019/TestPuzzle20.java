package net.akaritakai.aoc2019;

import org.testng.Assert;
import org.testng.annotations.Test;


public class TestPuzzle20 extends BasePuzzleTest {
  @Test
  public void testPart1Example1() {
    var puzzle = new Puzzle20(
        "         A           \n" +
        "         A           \n" +
        "  #######.#########  \n" +
        "  #######.........#  \n" +
        "  #######.#######.#  \n" +
        "  #######.#######.#  \n" +
        "  #######.#######.#  \n" +
        "  #####  B    ###.#  \n" +
        "BC...##  C    ###.#  \n" +
        "  ##.##       ###.#  \n" +
        "  ##...DE  F  ###.#  \n" +
        "  #####    G  ###.#  \n" +
        "  #########.#####.#  \n" +
        "DE..#######...###.#  \n" +
        "  #.#########.###.#  \n" +
        "FG..#########.....#  \n" +
        "  ###########.#####  \n" +
        "             Z       \n" +
        "             Z       ");
    Assert.assertEquals(puzzle.solvePart1(), "23");
  }

  @Test
  public void testPart1Example2() {
    var puzzle = new Puzzle20(
        "                   A               \n" +
        "                   A               \n" +
        "  #################.#############  \n" +
        "  #.#...#...................#.#.#  \n" +
        "  #.#.#.###.###.###.#########.#.#  \n" +
        "  #.#.#.......#...#.....#.#.#...#  \n" +
        "  #.#########.###.#####.#.#.###.#  \n" +
        "  #.............#.#.....#.......#  \n" +
        "  ###.###########.###.#####.#.#.#  \n" +
        "  #.....#        A   C    #.#.#.#  \n" +
        "  #######        S   P    #####.#  \n" +
        "  #.#...#                 #......VT\n" +
        "  #.#.#.#                 #.#####  \n" +
        "  #...#.#               YN....#.#  \n" +
        "  #.###.#                 #####.#  \n" +
        "DI....#.#                 #.....#  \n" +
        "  #####.#                 #.###.#  \n" +
        "ZZ......#               QG....#..AS\n" +
        "  ###.###                 #######  \n" +
        "JO..#.#.#                 #.....#  \n" +
        "  #.#.#.#                 ###.#.#  \n" +
        "  #...#..DI             BU....#..LF\n" +
        "  #####.#                 #.#####  \n" +
        "YN......#               VT..#....QG\n" +
        "  #.###.#                 #.###.#  \n" +
        "  #.#...#                 #.....#  \n" +
        "  ###.###    J L     J    #.#.###  \n" +
        "  #.....#    O F     P    #.#...#  \n" +
        "  #.###.#####.#.#####.#####.###.#  \n" +
        "  #...#.#.#...#.....#.....#.#...#  \n" +
        "  #.#####.###.###.#.#.#########.#  \n" +
        "  #...#.#.....#...#.#.#.#.....#.#  \n" +
        "  #.###.#####.###.###.#.#.#######  \n" +
        "  #.#.........#...#.............#  \n" +
        "  #########.###.###.#############  \n" +
        "           B   J   C               \n" +
        "           U   P   P               ");
    Assert.assertEquals(puzzle.solvePart1(), "58");
  }

  @Test
  public void testSolvePart1() throws Exception {
    var puzzle = new Puzzle20(getStoredInput(20));
    Assert.assertEquals(puzzle.solvePart1(), "620");
  }

  @Test
  public void testPart2Example1() {
    var puzzle = new Puzzle20(
        "         A           \n" +
            "         A           \n" +
            "  #######.#########  \n" +
            "  #######.........#  \n" +
            "  #######.#######.#  \n" +
            "  #######.#######.#  \n" +
            "  #######.#######.#  \n" +
            "  #####  B    ###.#  \n" +
            "BC...##  C    ###.#  \n" +
            "  ##.##       ###.#  \n" +
            "  ##...DE  F  ###.#  \n" +
            "  #####    G  ###.#  \n" +
            "  #########.#####.#  \n" +
            "DE..#######...###.#  \n" +
            "  #.#########.###.#  \n" +
            "FG..#########.....#  \n" +
            "  ###########.#####  \n" +
            "             Z       \n" +
            "             Z       ");
    Assert.assertEquals(puzzle.solvePart2(), "26");
  }

  @Test
  public void testPart2Example2() {
    var puzzle = new Puzzle20(
        "             Z L X W       C                 \n" +
        "             Z P Q B       K                 \n" +
        "  ###########.#.#.#.#######.###############  \n" +
        "  #...#.......#.#.......#.#.......#.#.#...#  \n" +
        "  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  \n" +
        "  #.#...#.#.#...#.#.#...#...#...#.#.......#  \n" +
        "  #.###.#######.###.###.#.###.###.#.#######  \n" +
        "  #...#.......#.#...#...#.............#...#  \n" +
        "  #.#########.#######.#.#######.#######.###  \n" +
        "  #...#.#    F       R I       Z    #.#.#.#  \n" +
        "  #.###.#    D       E C       H    #.#.#.#  \n" +
        "  #.#...#                           #...#.#  \n" +
        "  #.###.#                           #.###.#  \n" +
        "  #.#....OA                       WB..#.#..ZH\n" +
        "  #.###.#                           #.#.#.#  \n" +
        "CJ......#                           #.....#  \n" +
        "  #######                           #######  \n" +
        "  #.#....CK                         #......IC\n" +
        "  #.###.#                           #.###.#  \n" +
        "  #.....#                           #...#.#  \n" +
        "  ###.###                           #.#.#.#  \n" +
        "XF....#.#                         RF..#.#.#  \n" +
        "  #####.#                           #######  \n" +
        "  #......CJ                       NM..#...#  \n" +
        "  ###.#.#                           #.###.#  \n" +
        "RE....#.#                           #......RF\n" +
        "  ###.###        X   X       L      #.#.#.#  \n" +
        "  #.....#        F   Q       P      #.#.#.#  \n" +
        "  ###.###########.###.#######.#########.###  \n" +
        "  #.....#...#.....#.......#...#.....#.#...#  \n" +
        "  #####.#.###.#######.#######.###.###.#.#.#  \n" +
        "  #.......#.......#.#.#.#.#...#...#...#.#.#  \n" +
        "  #####.###.#####.#.#.#.#.###.###.#.###.###  \n" +
        "  #.......#.....#.#...#...............#...#  \n" +
        "  #############.#.#.###.###################  \n" +
        "               A O F   N                     \n" +
        "               A A D   M                     ");
    Assert.assertEquals(puzzle.solvePart2(), "396");
  }

  @Test
  public void testSolvePart2() throws Exception {
    var puzzle = new Puzzle20(getStoredInput(20));
    Assert.assertEquals(puzzle.solvePart2(), "7366");
  }
}
